from cmath import sqrt
from statistics import variance
import pandas as pd
import numpy as np
import scipy.stats as stats
import math
import matplotlib.pyplot as plt


def trunc_2(number):
    return (math.trunc(100*number))/100


data = [-0.3215547357505757, -0.3319353085878156,
        -0.24041952674527145, -0.07419496077144594,
        -0.8128361237386743, 0.11486102010836798,
        -0.7071599821380598, 0.35425828029655854,
        -0.699025876195103, 0.44053238551040075,
        -0.8517708129485914, -0.04514726639680425,
        0.14364425139081335, 0.474143285190734,
        0.4734914466665601, -0.38687081288313896,
        -0.3260077097932424, -0.29581208875134923,
        0.513558191818291, -0.4099388846182946,
        -0.6004917506884477, -0.44226908330909737,
        0.24027811901940524, -0.31534528676208984,
        1.1368424150689826, -0.7167866368935635,
        -0.16990453942291847, 0.5509119272061159,
        -0.30861586851909756, -0.9712120653269644,
        0.9088201803939693, 0.07289921522627982,
        -0.012257201507801874, 0.4184547880466649,
        0.32338018957971804, 0.5707768481844615,
        1.1095948851187571, -0.9301220898928009,
        -0.13004199535625094, -0.736519616506904,
        0.18000501248184006, 0.035153299248327795,
        -0.23923520748514068, -0.25629523648325964,
        0.10597794438881629, 0.5950039036695727,
        -0.5925683935328064, -0.8222070133888064,
        0.21302713623685263, -0.756706443733329,
        0.24994858320118168, -0.1756625421258808,
        -0.08209232028972574, 0.5200191531843273,
        0.08130063695274527, 0.6189748458193842,
        0.18175394859965063, -0.8805725537356285,
        0.10471058004234911, 0.5604961855270599,
        0.8731057465283417, -0.7526117863635886,
        -0.19092283137938043, -0.36558570026563114,
        -0.10132395423148109, -1.1753165253286268,
        0.39954650867252733, 0.5539879767452314,
        0.6108324903048273, -0.3409588320631081,
        1.2798705472228713, -0.4704426238505452,
        -0.23962854815856338, 0.35689727113870096,
        -0.6646951772633649, -0.0704288098394768,
        -0.18827384783766782, -0.12126392620527753,
        -0.10835475814237627, -0.06684151972442151,
        -0.39057405653415417, -0.09304704618708533,
        -0.231364152993783, 0.40680137312173165,
        0.0015926732667134666, 0.044760024146897975,
        -0.3992092575828009, -0.36769928011076697,
        -0.8403963727261324, 1.288467212844699,
        0.6563028819877131, -0.8726604217727371,
        0.8300830446436451, -1.2958190275366095,
        -0.15797601812670375, -0.1106233033930201,
        -0.3334133449833922, -0.018461405663446888,
        0.4745775856226574, -0.5143110536659379,
        0.8228318733408982, -0.4039440161089157,
        -0.48706374010098297, -0.04260342177748906,
        0.11195429182614364, 0.20956571463388496,
        -0.2869526045598572, 0.02815695126450249,
        0.37731812228690514, -0.4939064467926544,
        -0.18944124247348812, 0.26968032370103184,
        -0.34740106332160114, 0.8986291284985242,
        0.5572108551129255, -0.08091132922452364,
        0.4218631784188165, 0.07738127785826378,
        -0.8141796879191168, 0.3851134040155486,
        -0.10469131931786033, -1.1869332201146086,
        -0.797013618962107, -0.9076550901546933,
        -0.4875903705496847, -0.5575411247973634,
        0.10839617594040929, -0.5971943305539892,
        0.6698374440325441, 0.030196979261822163,
        0.09083554706493795, -0.11771529167104301,
        0.28479720299175804, -0.029854899325741084,
        -0.01532225742051758, 0.25868668015472085,
        0.5242242644717788, 0.7751818346794561,
        -0.5914542151268627, 0.4089581374581523,
        0.30780683672819176, -0.09095603769348361,
        0.12497099618718721, -0.32195546787824586,
        0.12060870298947954, 0.18473335858153395,
        0.005026089993732802, 0.0696742791801233,
        0.5123612955774525, -0.49125343445382397,
        0.06057931803969171, -0.02443537066123538,
        -0.5344606837020687, 0.7287331538318578,
        -0.06420702470474217, -0.17980561874432485,
        -0.40180249886520897, -0.006399476315702219,
        0.873853356549236, -0.09525931245282539,
        0.7032196840015351, 0.36392409403384607,
        -0.46672283739314685, -0.08954793388961481,
        0.752538719779115, 0.04080040229189355,
        0.08020590265595577, -0.36049422963485034,
        -0.34332234806658113, 0.8521914267602425,
        -0.2254394815773997, 0.3653752084945582,
        -0.490289903603252, 0.47373193946486947,
        0.469007957844969, -0.20716639024875028,
        -0.047242419724689046, -0.903145727451859,
        0.5854513004784748, -0.4216244144156969,
        1.607956255527261, 1.0663424940219397,
        0.22588892923067097, 0.0912073776643983,
        -0.02934726998006176, 0.6966805923139122,
        -0.1518595485614854, -0.7061434512183561,
        -0.4408752199421931, 0.12610466693938954,
        0.05071310497001083, 0.43348330375947736,
        0.019135310856285642, -0.37247282617989036,
        -0.3233995890142629, -0.28546460071055896,
        -0.09910825180299165, 0.7184606655392511,
        -0.42922478095635624, 0.21142819812874047,
        0.652105396447727, -0.6713007582603817,
        -0.9137875742129464, 0.5304846988361573,
        0.8150066860288693, -0.3586708383232873,
        0.14311754896597417, 0.11652106493526226,
        0.29591548823615765, 0.057750962315997946,
        0.5552181431354963, 0.8182757504297589,
        0.5061041511128241, 0.03394794656566042,
        0.17296729962911736, 0.8055564878907253,
        -0.30719853559726545, 0.848634803146977,
        0.05125558633134805, 0.7546120502421356,
        -0.1909501578381919, 0.47821716389698427,
        0.30112853435265013, 0.3297847480774593,
        0.18464726359056954, 0.4816935371859782,
        0.2808831008719313, 0.016557266321843126,
        0.6232887380760188, -0.5544989176344727,
        -0.31228682317046236, 0.5943262204210549,
        0.6548361143624124, -0.315433661274714,
        -1.0314822156951748, 0.5945412596509483,
        -0.03948410584331657, -0.13184456463785882,
        0.1278582520093926, -0.11764702253842413,
        0.047559398395712875, 0.2624514103425107,
        -0.27360248968095413, 0.3115177286369663,
        0.6055613907307902, 0.09422639282052285,
        0.2329956939647674, 0.21574846247405385,
        -0.0559022874351033, -0.16185354248028466,
        -0.2978180314329034, 0.19970792942343224,
        -0.41186930940780264, 0.12347988563328516,
        0.16220777017194207, -0.20652257322703976,
        -0.401353512640598, 0.6219248552314958,
        0.27013066939490765, -0.0142087155136791,
        0.7582209195035458, -0.6226867898852336,
        0.03089723656885978, -0.1277879267568906,
        -0.25706667668790956, 0.5607256172025764,
        0.24456677167783, -0.38983814737599903,
        0.09099800428768634, -0.03632880503473235,
        -0.5764045457876846, -0.5976597001624111,
        -0.11943772069197277, 0.6756678254014445,
        0.2327464838655234, -0.055502277633229666,
        -0.2939241098418754, -0.16549803216465037,
        -0.4085400504049347, 0.9156567688934824,
        0.005917839617817923, -0.15834145822071374,
        -0.3208405523476716, -1.0823699990796136,
        -0.2955870251204776, -0.3086100179661969,
        0.4481514123391736, 1.2545750540898029,
        -0.3755976781731523, -0.549929875018031,
        0.9696342886512228, 0.04461302584862201,
        -0.11200582808076467, -0.29558709093577845,
        -0.468044359813515, -0.22027076637089554,
        -0.30656505413546026, 0.6493967182298429,
        -0.34755486049624573, -0.9602755012452167]
data.sort()

df = pd.DataFrame(data, columns=["Value"])


size = df.count().values[0]
min = df.min().values[0]
max = df.max().values[0]
amp_total = max-min

k = int(1 + (3.322 * math.log(size)))

amp_classe = trunc_2(amp_total/k)

print("\n--- DADOS ORDENADOS ---\n")
print(df)
print("\n--- SOBRE A AMOSTRA ---\n")
print("Nº de elementos  ", size)
print("Valor Máximo:    ", max)
print("Valor Mínimo:    ", min)
print("Amplitude Total: ", amp_total)
print("Nº de Classes:   ", k)
print("Amp. de Classe:  ", amp_classe)

print("\n")
print("--- QUESTAO 1 ---")

# a) Verdadeiro

print("\n")
print("--- QUESTAO 2 ---")

# Uma variável dependente tem seu o valor associado ao de outra variável (seja qual for a natureza da depenência, inversa, direta, etc.)
# Uma variável independente conforme for determinada arbitrariamente.
# A relação entre elas é: A variável independente é escolhida e variada para que se observe e analise como a variável dependente se comporta com essas variações.

print("\n")
print("--- QUESTAO 3 ---")

# Condicionais (IFs) funcionam recebendo uma condição (geralmente uma comparação de valores ou uma variável booleana) com valor "VERDADEIRO" ou "FALSO".
# Em caso "VERDADEIRO", ela executa um bloco de código desejado, em caso "FALSO" não o executa, podendo haver ou não um outro bloco de código para esses casos.

print("\n")
print("--- QUESTAO 4 ---")

# FOR: Executa um bloco de código uma QUANTIDADE PRÉ-DETERMINADA de vezes. Sendo possível determinar essa quantidade com um valor inteiro ou passando um objeto iterável (com foreach).
# (ex: uma lista de 10 elementos, o código executa 10x sem ser necessário específicar)
# WHILE: Executa um bloco de código uma QUANTIDADE INDETERMINADA de vezes atrelada a uma variável booleana, é  como um IF cíclico infinito, ele só para quando a condição de execução for FALSA.
# Um "while(true)" poderia executar infinitamente caso não seja mandado parar com um "break" ou fechando o programa.

print("\n")
print("--- QUESTAO 5 ---")

media = np.average(data)
mediana = np.median(data)
print("Media:           ", media)
print("Mediana:         ", mediana)
# Tem-se mais valores negativos do que positivos na amostra.
# Os valores da amostra variam entorno de 0

print("\n")
print("--- QUESTAO 6 ---")

moda = stats.mode(data, axis=None)
print(f"Moda: {moda}")
# A moda está retornando com count = 1, ou seja, a amostra é amodal. O valor indicado como moda "-1.29251903" é simplesmente o menor (e primeiro) valor da amostra.

print("\n")

variancia = df.var().values[0]
desvio_p = sqrt(variancia).real
print("Variância:       ", variancia)
print("Desvio Padrão:   ", desvio_p)

print("\n")
print("--- QUESTAO 8 ---")

# Antes das questões, já foram calculadas as amplitudes total e de classe, além do nº de classes.
frequencias = []
valor_min = math.floor(min*100)/100
valor_max = math.ceil(max*100)/100

data_bins = []
while valor_min <= valor_max:
    data_bins.append(trunc_2(valor_min))
    valor_min += amp_classe
data_bins.append(valor_max)

freq_abs = pd.cut(x=df["Value"], bins=data_bins)

df["Amp"] = freq_abs
bincount = pd.value_counts(df['Amp'])

print("Amplitude Total: ", amp_total)
print("Nº de Classes:   ", k)
print("Amp. de Classe:  ", amp_classe)
print("- FULL DATA SET -\n")
print(df)
print("\n- APENAS FREQUÊNCIAS -\n")
print(bincount)

print("\n")
print("--- QUESTAO 9 ---")

quartis = pd.qcut(df["Value"], q=4)
print(pd.value_counts(quartis))
print("\n")

plt.boxplot(df["Value"])
plt.show()
# Temos o valor máximo (1.608...) como o único outlier da amostra. Exceto por este caso, a amostra apresenta uma distribuição próxima a uma distribuição normal.

print("\n")
print("--- QUESTAO 10 ---")

plt.hist(data, k, rwidth=0.6)
plt.show()
